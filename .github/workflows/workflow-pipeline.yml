name: New CI

on:
  push:
    branches:
      - develop
      - develop-ci
      - feature/*
      - uat
      - main
      - master

      
jobs:
  setup:
    runs-on: llq
    outputs:
      envName: ${{ steps.set-env-name.outputs.environment }}
    steps:
      - id: set-env-name
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT;
          elif [[ "${{ github.ref_name }}" =~ "uat" ]]; then
            echo "environment=uat" >> $GITHUB_OUTPUT;
          else
            echo "environment=sandbox" >> $GITHUB_OUTPUT;
          fi

  build-push-deploy:
    runs-on: llq
    needs: setup
    environment:
      name: ${{ needs.setup.outputs.envName }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.2

      - name: Take docker-compose config
        id: arti
        run: |
          if [[ "${{ needs.setup.outputs.envName }}" == "production" ]]; then
            echo "${{ secrets.CONFIGURATION_PRODUCTION }}" >> artifact;
          elif [[ "${{ needs.setup.outputs.envName }}" == "sandbox" ]]; then
            echo "${{ secrets.CONFIGURATION_SANDBOX }}" >> artifact;
          elif [[ "${{ needs.setup.outputs.envName }}" == "uat" ]]; then
            echo "${{ secrets.CONFIGURATION_UAT }}" >> artifact;
          fi
          

      - name: Preparing Docker compose file
        env:
          ENV_NAME: ${{ vars.ENV_NAME }}
          ENV_SERVICE_NAME: ${{ vars.SWARM_SERVICE_NAME }}
          ENV_IZOTA_REPO: ${{ secrets.DOCKERHUB_IZOTA_REPO }}
          DEPLOY_OPTION: ${{ vars.DEPLOY_OPTION }}
          EXTRA_HOST: ${{ vars.EXTRA_HOST }}
          CONFIG_SELF: ${{ vars.CONFIG_SELF }}
          PORT: ${{ vars.PORT }}
          VOLUME: ${{ vars.VOLUME }}
          VOLUME_CONFIG: ${{ vars.VOLUME_CONFIG }}
          SECRET: ${{ vars.SECRET }}
          SECRET_CONFIG: ${{ vars.SECRET_CONFIG }}
          EXTRA_DB: ${{ secrets.EXTRA_DB }}
        run: |
          export ENV_ENVIRONMENT=$(cat artifact)
          cat deploy/docker-compose.yml.j2 | envsubst > deploy/docker-compose-ci.yml

      - name: build-push
        uses: Zopost2023/cicd-build-push@master
        with:
          service-name: ${{ vars.SWARM_SERVICE_NAME }}
          env: ${{ vars.ENV_NAME }}
          dockerhub-username: ${{ secrets.DOCKERHUB_USERNAME_ZP }}
          dockerhub-token: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_ZP }}
          dockerhub-repo: ${{ secrets.DOCKERHUB_IZOTA_REPO }}
          dockerfile-des: ./iZOTA.Core.Booking.Hosting/Dockerfile

      - name: deploy
        uses: Zopost2023/cicd-deploy@master
        with:
          docker-stack: ${{ vars.SWARM_SERVICE_STACK }}
          service-name: ${{ vars.SWARM_SERVICE_NAME }}
          service-location: ${{ vars.SWARM_SERVICE_LOCATION }}
          deploy-host: ${{ vars.DEPLOY_HOST }}
          ssh-user: ${{ secrets.DEPLOY_CI_USERNAME }}
          ssh-key: ${{ secrets.DEPLOY_CI_PRIVATE_KEY }}
          docker-compose-location: "deploy/docker-compose-ci.yml"
          deploy-state: ${{ vars.DEPLOY_STATE }}

  ping-slack:
    if: always()
    needs: 
      - build-push-deploy
      - setup
    runs-on: llq
    environment:
      name: ${{ needs.setup.outputs.envName }}
    steps:
      - name: Ping slack
        uses: Zopost2023/cicd-notify-slack@master
        with:
          name: ${{ vars.SWARM_SERVICE_NAME }}
          env: ${{ needs.setup.outputs.envName }}
          channel-id: ${{ secrets.SLACK_DEV_CHANNEL_ID }}
          channel-token: ${{ secrets.SLACK_BOT_TOKEN }}
          status: ${{ needs.build-push-deploy.result }}
          author: ${{ github.event.commits[0].author.name }}
          msg: ${{ github.event.commits[0].message }}
